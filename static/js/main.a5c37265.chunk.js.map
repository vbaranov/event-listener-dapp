{"version":3,"sources":["App.js","serviceWorker.js","index.js","config.js","logo.svg"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","render","react_default","a","createElement","className","style","position","top","padding","Button_default","onClick","executeContract","disabled","state","isLoading","renderLoader","lib","componentDidMount","window","web3","Web3","currentProvider","EventEmitterContract","eth","contract","config","abi","networkID","version","network","EventEmitterContractInstance","at","addresses","FunctionCalled","watch","error","result","setState","console","log","notify","concat","args","_id","emitEvent","_getRandomInt","sendTransaction","from","accounts","txHash","message","toast","min","max","Math","floor","random","Component","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","77","99","constant","inputs","name","type","outputs","payable","stateMutability","anonymous","indexed","__webpack_require__","p"],"mappings":"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","file":"static/js/main.a5c37265.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Button from 'react-bootstrap/lib/Button'\nimport logo from './logo.svg'\nimport Web3 from 'web3'\nimport './App.css'\nimport config from './config.js'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.web3 = null\n    this.EventEmitterContractInstance = null\n    this.state = {\n      \"isLoading\": false\n    }\n  }\n\n  render = () => {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h2 style={{\n            position: 'absolute',\n            top: '100px',\n            padding: '0 20%',\n          }}>This simple DApp executes smart-contract method which emits event, and DApp subscribes to this event and shows toast with event param.\n            <h4>\n              <i>Note:</i> Smart-contracts are deployed to POA core and Sokol networks.\n            </h4>\n          </h2>\n          <Button onClick={() => this.executeContract()} disabled={this.state.isLoading}>Execute Contract</Button>\n          {this.renderLoader()}\n          <ToastContainer />\n        </header>\n      </div>\n    );\n  }\n\n  renderLoader = () => {\n    if (!this.state.isLoading) {\n      return null\n    }\n\n    return (\n      <div>\n        <label className='small'>waiting for event...</label>\n      </div>\n    )\n  }\n\n  componentDidMount = () => {\n    if (window.web3) {\n        this.web3 = new Web3(window.web3.currentProvider)\n        const EventEmitterContract = this.web3.eth.contract(config.contract.abi)\n        const networkID = this.web3.version.network;\n        this.EventEmitterContractInstance = EventEmitterContract.at(config.contract.addresses[networkID])\n        const contractEvent = this.EventEmitterContractInstance.FunctionCalled()\n        contractEvent.watch((error, result) => {\n          this.setState({\n            \"isLoading\": false\n          })\n          if (error) {\n            console.log(error)\n          }\n          console.log(result)\n          this.notify(`Event has been successfully emitted with id ${result.args._id} !`)\n        })\n    }\n  }\n\n  executeContract = () => {\n    this.setState({\n      \"isLoading\": true\n    })\n    const emitEvent = this.EventEmitterContractInstance.emitEvent\n    const _id = this._getRandomInt(0, 1000)\n    emitEvent.sendTransaction(_id, {\n      from: this.web3.eth.accounts[0]\n    }, (error, txHash) => {\n      if (error) {\n        console.log(error)\n      }\n      console.log(`txHash: ${txHash}`)\n    })\n  }\n\n  notify = (message) => toast(message);\n\n  _getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = {\n\t\"contract\": {\n\t\t\"addresses\": {\n\t\t\t\"77\": \"0xa65cb829013ea7027ec1fcb0f65d676466ba2a2a\",\n\t\t\t\"99\": \"0x5ea64d75a6cd9f89cb524feb8f432b22afa31d3d\"\n\t\t},\n\t\t\"abi\": [\n\t\t\t{\n\t\t\t\t\"constant\": false,\n\t\t\t\t\"inputs\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"_id\",\n\t\t\t\t\t\t\"type\": \"uint256\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"name\": \"emitEvent\",\n\t\t\t\t\"outputs\": [],\n\t\t\t\t\"payable\": false,\n\t\t\t\t\"stateMutability\": \"nonpayable\",\n\t\t\t\t\"type\": \"function\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"anonymous\": false,\n\t\t\t\t\"inputs\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"indexed\": true,\n\t\t\t\t\t\t\"name\": \"_id\",\n\t\t\t\t\t\t\"type\": \"uint256\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"name\": \"FunctionCalled\",\n\t\t\t\t\"type\": \"event\"\n\t\t\t}\n\t\t]\n\t}\n}","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}