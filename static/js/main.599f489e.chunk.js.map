{"version":3,"sources":["App.js","serviceWorker.js","index.js","config.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","render","react_default","a","createElement","className","style","position","top","padding","Button_default","onClick","executeContract","disabled","state","isLoading","isRejected","networkID","renderLoader","lib","componentWillMount","window","ethereum","_getWeb3","web3","Web3","currentProvider","_subscribeToEvent","setState","emitEvent","EventEmitterContractInstance","_id","_getRandomInt","sendTransaction","from","eth","accounts","error","txHash","console","log","concat","notify","message","toast","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","enable","t0","stop","EventEmitterContract","contract","config","abi","version","network","at","addresses","contractEvent","FunctionCalled","Number","watch","result","args","min","max","Math","floor","random","Component","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","77","99","constant","inputs","name","type","outputs","payable","stateMutability","anonymous","indexed"],"mappings":"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","file":"static/js/main.599f489e.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Button from 'react-bootstrap/lib/Button'\nimport Web3 from 'web3'\nimport './App.css'\nimport config from './config.js'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.web3 = null\n    this.EventEmitterContractInstance = null\n    this.state = {\n      \"isLoading\": false,\n    }\n  }\n\n  render = () => {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h2 style={{\n            position: 'absolute',\n            top: '100px',\n            padding: '0 20%',\n          }}>This simple DApp executes smart-contract method which emits event, and DApp subscribes to this event and shows toast with event param.\n            <h4>\n              <i>Note:</i> Smart-contracts are deployed to POA core and Sokol networks.\n            </h4>\n          </h2>\n          <Button onClick={() => this.executeContract()} disabled={this.state.isLoading || this.state.isRejected || (this.state.networkID !== 77 && this.state.networkID !== 99)}>Execute Contract</Button>\n          {this.renderLoader()}\n          <ToastContainer />\n        </header>\n      </div>\n    );\n  }\n\n  renderLoader = () => {\n    if (!this.state.isLoading) {\n      return null\n    }\n\n    return (\n      <div>\n        <label className='small'>waiting for event...</label>\n      </div>\n    )\n  }\n\n  componentWillMount = () => {\n    if (window.ethereum) {\n        this._getWeb3()\n    } else if (window.web3) {\n        this.web3 = new Web3(window.web3.currentProvider)\n        this._subscribeToEvent()\n    }\n  }\n\n  executeContract = () => {\n    this.setState({\n      \"isLoading\": true\n    })\n    const emitEvent = this.EventEmitterContractInstance.emitEvent\n    const _id = this._getRandomInt(0, 1000)\n    emitEvent.sendTransaction(_id, {\n      from: this.web3.eth.accounts[0]\n    }, (error, txHash) => {\n      if (error) {\n        console.log(error)\n        this.setState({\n          \"isLoading\": false\n        })\n      }\n      if (txHash) {\n        console.log(`txHash: ${txHash}`)\n      }\n    })\n  }\n\n  notify = (message) => toast(message)\n\n  _getWeb3 = async () => {\n    this.web3 = new Web3(window.ethereum);\n    try {\n        // Request account access if needed\n        await window.ethereum.enable()\n        // Acccounts now exposed\n        this._subscribeToEvent()\n    } catch (error) {\n        // User denied account access...\n        this.setState({\n          \"isRejected\": true\n        })\n    }\n  }\n\n  _subscribeToEvent = () => {\n    const EventEmitterContract = this.web3.eth.contract(config.contract.abi)\n    const networkID = this.web3.version.network;\n    this.EventEmitterContractInstance = EventEmitterContract.at(config.contract.addresses[networkID])\n    const contractEvent = this.EventEmitterContractInstance.FunctionCalled()\n    this.setState({\n      \"networkID\": Number(networkID)\n    })\n    contractEvent.watch((error, result) => {\n      this.setState({\n        \"isLoading\": false\n      })\n      if (error) {\n        console.log(error)\n      }\n      console.log(result)\n      this.notify(`Event has been successfully emitted with id ${result.args._id} !`)\n    })\n  }\n\n  _getRandomInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = {\n\t\"contract\": {\n\t\t\"addresses\": {\n\t\t\t\"77\": \"0xa65cb829013ea7027ec1fcb0f65d676466ba2a2a\",\n\t\t\t\"99\": \"0x5ea64d75a6cd9f89cb524feb8f432b22afa31d3d\"\n\t\t},\n\t\t\"abi\": [\n\t\t\t{\n\t\t\t\t\"constant\": false,\n\t\t\t\t\"inputs\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"_id\",\n\t\t\t\t\t\t\"type\": \"uint256\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"name\": \"emitEvent\",\n\t\t\t\t\"outputs\": [],\n\t\t\t\t\"payable\": false,\n\t\t\t\t\"stateMutability\": \"nonpayable\",\n\t\t\t\t\"type\": \"function\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"anonymous\": false,\n\t\t\t\t\"inputs\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"indexed\": true,\n\t\t\t\t\t\t\"name\": \"_id\",\n\t\t\t\t\t\t\"type\": \"uint256\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"name\": \"FunctionCalled\",\n\t\t\t\t\"type\": \"event\"\n\t\t\t}\n\t\t]\n\t}\n}"],"sourceRoot":""}